/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Counter, CounterInterface } from "../Counter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "word",
        type: "string",
      },
    ],
    name: "WordAdded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "word",
        type: "string",
      },
    ],
    name: "addWord",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getNum",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getWordCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getWords",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newNum",
        type: "uint256",
      },
    ],
    name: "setNum",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260026001553480156200001657600080fd5b5060006040518060600160405280603d815260200162000cd3603d9139905060006200004282620000b2565b905060005b8151811015620000a9576000828281518110620000685762000068620003e3565b602090810291909101810151825460018101845560009384529190922001906200009390826200049e565b5080620000a08162000580565b91505062000047565b505050620005ce565b6060816000805b82518110156200012f576040805180820190915260018152600160fd1b60209091018190528351849083908110620000f557620000f5620003e3565b01602001516001600160f81b031916036200011a5781620001168162000580565b9250505b80620001268162000580565b915050620000b9565b5060006200013f8260016200059c565b6001600160401b03811115620001595762000159620003f9565b6040519080825280602002602001820160405280156200018e57816020015b6060815260200190600190039081620001785790505b50905060008060005b855181101562000255576040805180820190915260018152600160fd1b60209091018190528651879083908110620001d357620001d3620003e3565b01602001516001600160f81b031916036200024057620002018884620001fb600185620005b8565b62000297565b848381518110620002165762000216620003e3565b60209081029190910101526200022e8160016200059c565b9250816200023c8162000580565b9250505b806200024c8162000580565b91505062000197565b506200026c878360018851620001fb9190620005b8565b838281518110620002815762000281620003e3565b6020908102919091010152509095945050505050565b606083828411801590620002ab5750805183105b620002fc5760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420737562737472696e6720696e646963657300000000000000604482015260640160405180910390fd5b60006200030a8585620005b8565b620003179060016200059c565b6001600160401b03811115620003315762000331620003f9565b6040519080825280601f01601f1916602001820160405280156200035c576020820181803683370190505b509050845b848111620003d9578281815181106200037e576200037e620003e3565b01602001516001600160f81b031916826200039a8884620005b8565b81518110620003ad57620003ad620003e3565b60200101906001600160f81b031916908160001a90535080620003d08162000580565b91505062000361565b5095945050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200042457607f821691505b6020821081036200044557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200049957600081815260208120601f850160051c81016020861015620004745750805b601f850160051c820191505b81811015620004955782815560010162000480565b5050505b505050565b81516001600160401b03811115620004ba57620004ba620003f9565b620004d281620004cb84546200040f565b846200044b565b602080601f8311600181146200050a5760008415620004f15750858301515b600019600386901b1c1916600185901b17855562000495565b600085815260208120601f198616915b828110156200053b578886015182559484019460019091019084016200051a565b50858210156200055a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b6000600182016200059557620005956200056a565b5060010190565b80820180821115620005b257620005b26200056a565b92915050565b81810381811115620005b257620005b26200056a565b6106f580620005de6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630ce5a0981461005c5780634974da811461007357806367e0badb14610088578063cd16ecbf14610090578063dca7bcbe146100a3575b600080fd5b6000545b6040519081526020015b60405180910390f35b61008661008136600461038c565b6100b8565b005b600154610060565b61006061009e36600461043d565b61017b565b6100ab6101e7565b60405161006a919061049c565b60008151116101075760405162461bcd60e51b8152602060048201526016602482015275576f7264206d757374206e6f7420626520656d70747960501b60448201526064015b60405180910390fd5b600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563016101408282610587565b507fa8a13d5362cedeaaf8906a83b0afcab2c07c8bdac8a04ed19d273c4307f260bd816040516101709190610647565b60405180910390a150565b6000805482106101de5760405162461bcd60e51b815260206004820152602860248201527f63616e6e6f7420736574206e756d206d6f7265207468616e206c656e677468206044820152676f6620617272617960c01b60648201526084016100fe565b50600181905590565b600154600080546060929081106102325760405162461bcd60e51b815260206004820152600f60248201526e496e76616c696420696e646963657360881b60448201526064016100fe565b60008167ffffffffffffffff81111561024d5761024d610376565b60405190808252806020026020018201604052801561028057816020015b606081526020019060019003908161026b5790505b509050825b8281101561036e57600081815481106102a0576102a0610661565b9060005260206000200180546102b5906104fe565b80601f01602080910402602001604051908101604052809291908181526020018280546102e1906104fe565b801561032e5780601f106103035761010080835404028352916020019161032e565b820191906000526020600020905b81548152906001019060200180831161031157829003601f168201915b5050505050828583610340919061068d565b8151811061035057610350610661565b60200260200101819052508080610366906106a6565b915050610285565b509392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561039e57600080fd5b813567ffffffffffffffff808211156103b657600080fd5b818401915084601f8301126103ca57600080fd5b8135818111156103dc576103dc610376565b604051601f8201601f19908116603f0116810190838211818310171561040457610404610376565b8160405282815287602084870101111561041d57600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121561044f57600080fd5b5035919050565b6000815180845260005b8181101561047c57602081850181015186830182015201610460565b506000602082860101526020601f19601f83011685010191505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156104f157603f198886030184526104df858351610456565b945092850192908501906001016104c3565b5092979650505050505050565b600181811c9082168061051257607f821691505b60208210810361053257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561058257600081815260208120601f850160051c8101602086101561055f5750805b601f850160051c820191505b8181101561057e5782815560010161056b565b5050505b505050565b815167ffffffffffffffff8111156105a1576105a1610376565b6105b5816105af84546104fe565b84610538565b602080601f8311600181146105ea57600084156105d25750858301515b600019600386901b1c1916600185901b17855561057e565b600085815260208120601f198616915b82811015610619578886015182559484019460019091019084016105fa565b50858210156106375787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152600061065a6020830184610456565b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156106a0576106a0610677565b92915050565b6000600182016106b8576106b8610677565b506001019056fea26469706673582212209ac3246f4ffc4d1f0e34d70c85b548c0ba458078dd1dc96c6f0887a517fbbf9864736f6c634300081400334c6f72656d20697073756d20646f6c6f722073697420616d657420636f6e73656374657475722061646970697363696e6720656c69742073656420646f";

type CounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Counter__factory extends ContractFactory {
  constructor(...args: CounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Counter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Counter__factory {
    return super.connect(runner) as Counter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new Interface(_abi) as CounterInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Counter {
    return new Contract(address, _abi, runner) as unknown as Counter;
  }
}
